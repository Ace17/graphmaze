#!/usr/bin/env python3
import sys
import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
import pygame
import math
from vec2 import Vec2
from graph import Graph, Edge, Game

WIDTH = 1920
HEIGHT = 1080
NODE_BG_COLOR = (32, 32, 32)
NODE_FG_COLOR = (224, 224, 255)
PRIMARY_EDGE_COLOR = (255, 255, 0)
SECONDARY_EDGE_COLOR = (32, 32, 32)
NODE_FG_HIGHLIGHT_COLOR = (255, 255, 0)
BG_COLOR = (0, 0, 0)
FG_COLOR = (255, 255, 255)
BORDER_SIZE = 1
NODE_RADIUS = 40

g_transform = Vec2(0, 0)
g_transformZoom = 0.75

def main(args):
    global g_transform
    global g_transformZoom

    if len(args) != 2:
        print("Usage: graphmaze <file.dot>")
        sys.exit(1)

    pygame.init()
    clock = pygame.time.Clock()

    fullGraph = loadGraph(args[1])
    game = Game(fullGraph)

    screen = pygame.display.set_mode((WIDTH, HEIGHT))

    ticks = 0
    while True:
        userInput = readUserInput()
        if userInput.quit == True:
            break

        speed = 32

        if pygame.key.get_pressed()[pygame.K_w]:
            g_transform.y += speed
        if pygame.key.get_pressed()[pygame.K_a]:
            g_transform.x += speed
        if pygame.key.get_pressed()[pygame.K_s]:
            g_transform.y -= speed
        if pygame.key.get_pressed()[pygame.K_d]:
            g_transform.x -= speed

        ticks += 1

        viewModel = game.tick(userInput)

        drawScreen(screen, viewModel)

        clock.tick(20)

def readUserInput():
    global g_transformZoom
    userInput = Warning()
    userInput.click = False
    userInput.click2 = False
    userInput.quit = False

    for event in pygame.event.get():
        if event.type == 2:
            print("Key: " + str(event.key))
            if event.key == 27:
                userInput.quit = True
        elif event.type == 4:
            pass # mouse move
        elif event.type == 5: # Mouse down
            if event.button == 1:
                userInput.click = True
            elif event.button == 3:
                userInput.click2 = True
            elif event.button == 4:
                g_transformZoom *= 1.1
            elif event.button == 5:
                g_transformZoom /= 1.1
        elif event.type == 6: # Mouse up
            pass
        elif event.type == pygame.QUIT:
            userInput.quit = True
        else:
            print("Unknown event: " + str(event.type))

    return userInput

def drawScreen(screen, viewModel):
    screen.fill(BG_COLOR)

    visibleNodes = dict()
    for vnode in viewModel.nodes:
        visibleNodes[vnode.name] = vnode
        drawNode(screen, vnode.name, vnode.pos, vnode.highlight)

    for edge in viewModel.edges:
        if not edge.src in visibleNodes:
            continue
        if not edge.dst in visibleNodes:
            continue

        if edge.src == vnode.name or edge.dst == vnode.name:
            color = PRIMARY_EDGE_COLOR
        else:
            color = SECONDARY_EDGE_COLOR
        drawNodeArrow(screen, visibleNodes[edge.src].pos, visibleNodes[edge.dst].pos, color)

    pygame.display.flip()

def drawNodeArrow(screen, pos1, pos2, color):
    if (pos1 - pos2).magnitude() < 0.1:
        return
    direction = (pos2 - pos1).normalize()
    drawArrow(screen,
            pos1 + direction * NODE_RADIUS,
            pos2 - direction * NODE_RADIUS,
            color)

def drawArrow(screen, pos1, pos2, color):
    pos1=transform(pos1)
    pos2=transform(pos2)
    if (pos1 - pos2).magnitude() < 0.1:
        return
    pygame.draw.line(screen, color, (pos1.x, pos1.y), (pos2.x, pos2.y), BORDER_SIZE)
    direction = (pos2 - pos1).normalize()
    pos3 = pos2 + direction.rotate(+2.5) * 10
    pygame.draw.line(screen, color, (pos2.x, pos2.y), (pos3.x, pos3.y), BORDER_SIZE)
    pos3 = pos2 + direction.rotate(-2.5) * 10
    pygame.draw.line(screen, color, (pos2.x, pos2.y), (pos3.x, pos3.y), BORDER_SIZE)

def drawNode(screen, name, center, highlight):
    pos=transform(center)
    pos2=transform(center+Vec2(NODE_RADIUS, 0))
    radius = (pos - pos2).magnitude()
    basicfont = pygame.font.SysFont(None, 28)
    text = basicfont.render(name, True, NODE_FG_COLOR, NODE_BG_COLOR)
    textrect = text.get_rect()
    textrect.centerx = int(pos.x)
    textrect.centery = int(pos.y)
    if highlight:
        color = NODE_FG_HIGHLIGHT_COLOR
    else:
        color = NODE_BG_COLOR
    pygame.draw.circle(screen, color, (int(pos.x), int(pos.y)), int(radius))
    pygame.draw.circle(screen, NODE_FG_COLOR, (int(pos.x), int(pos.y)), int(radius), BORDER_SIZE)
    screen.blit(text, textrect)
    del text

def transform(pos):
    v = (pos + g_transform) * g_transformZoom + Vec2(WIDTH/2, HEIGHT/2)
    return Vec2(int(v.x), int(v.y))

def loadGraph(path):
    import pydotplus
    pydotGraph = pydotplus.graph_from_dot_file(path)
    nodeNames = dict()
    edges = []

    for pydotEdge in pydotGraph.get_edge_list():
        src = pydotEdge.get_source().strip('"')
        dst = pydotEdge.get_destination().strip('"')
        edge = Edge(src, dst)
        nodeNames[edge.src] = 1
        nodeNames[edge.dst] = 1
        edges.append(edge)

    result = Graph()
    result.nodes = list(nodeNames.keys())
    result.edges = edges
    return result

main(sys.argv)
