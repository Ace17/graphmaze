#!/usr/bin/env python3
import sys
import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
import pygame
import math
from vec2 import Vec2
from graph import Graph, Edge, Game

WIDTH = 1920
HEIGHT = 1080
NODE_BG_COLOR = (32, 32, 32)
NODE_FG_COLOR = (255, 255, 255)
BG_COLOR = (0, 0, 0)
FG_COLOR = (255, 255, 255)
BORDER_SIZE = 4
NODE_RADIUS = 120

g_transform = Vec2(0, 0)

def main(args):
    if len(args) != 2:
        print("Usage: graphmaze <file.dot>")
        sys.exit(1)

    pygame.init()
    clock = pygame.time.Clock()

    fullGraph = loadGraph(args[1])
    game = Game(fullGraph)

    screen = pygame.display.set_mode((WIDTH, HEIGHT))

    ticks = 0
    while True:
        userInput = readUserInput()
        if userInput.quit == True:
            break

        speed = 32

        if pygame.key.get_pressed()[pygame.K_w]:
            g_transform.y += speed
        if pygame.key.get_pressed()[pygame.K_a]:
            g_transform.x += speed
        if pygame.key.get_pressed()[pygame.K_s]:
            g_transform.y -= speed
        if pygame.key.get_pressed()[pygame.K_d]:
            g_transform.x -= speed

        ticks += 1

        viewModel = game.tick(userInput)

        g_transform.x += 2 * math.sin(ticks * 0.5)
        g_transform.y += 2 * math.sin(ticks * 0.1)
        drawScreen(screen, viewModel)

        clock.tick(20)

def readUserInput():
    userInput = Warning()
    userInput.click = False
    userInput.quit = False

    for event in pygame.event.get():
        if event.type == 2:
            print("Key: " + str(event.key))
            if event.key == 27:
                userInput.quit = True
        elif event.type == 5:
            print("Click: " + str(event.pos))
            userInput.click = True
        elif event.type == pygame.QUIT:
            userInput.quit = True
        else:
            print("Unknown event: " + str(event.type))

    return userInput

def drawScreen(screen, viewModel):
    screen.fill(BG_COLOR)

    for name in viewModel.nodePos:
        drawNode(screen, name, viewModel.nodePos[name])

    for edge in viewModel.edges:
        if not edge.src in viewModel.nodePos:
            continue
        if not edge.dst in viewModel.nodePos:
            continue
        drawNodeArrow(screen, viewModel.nodePos[edge.src], viewModel.nodePos[edge.dst])

    pygame.display.flip()

def drawNodeArrow(screen, pos1, pos2):
    if pos1 == pos2:
        return
    direction = (pos2 - pos1).normalize()
    drawArrow(screen,
            pos1 + direction * NODE_RADIUS,
            pos2 - direction * NODE_RADIUS)

def drawArrow(screen, pos1, pos2):
    pos1=transform(pos1)
    pos2=transform(pos2)
    pygame.draw.line(screen, NODE_FG_COLOR, (pos1.x, pos1.y), (pos2.x, pos2.y), BORDER_SIZE)
    direction = (pos2 - pos1).normalize()
    pos3 = pos2 + direction.rotate(+2.5) * 50
    pygame.draw.line(screen, NODE_FG_COLOR, (pos2.x, pos2.y), (pos3.x, pos3.y), BORDER_SIZE)
    pos3 = pos2 + direction.rotate(-2.5) * 50
    pygame.draw.line(screen, NODE_FG_COLOR, (pos2.x, pos2.y), (pos3.x, pos3.y), BORDER_SIZE)

def drawNode(screen, name, pos):
    pos=transform(pos)
    basicfont = pygame.font.SysFont(None, 48)
    text = basicfont.render(name, True, NODE_FG_COLOR, NODE_BG_COLOR)
    textrect = text.get_rect()
    textrect.centerx = pos.x
    textrect.centery = pos.y
    pygame.draw.circle(screen, NODE_BG_COLOR, (int(pos.x), int(pos.y)), NODE_RADIUS)
    pygame.draw.circle(screen, NODE_FG_COLOR, (int(pos.x), int(pos.y)), NODE_RADIUS, BORDER_SIZE)
    screen.blit(text, textrect)
    del text

def transform(pos):
    return pos + g_transform + Vec2(WIDTH/2, HEIGHT/2)

def loadGraph(path):
    import pydotplus
    pydotGraph = pydotplus.graph_from_dot_file(path)
    nodeNames = dict()
    edges = []

    for pydotEdge in pydotGraph.get_edge_list():
        edge = Edge(pydotEdge.get_source(), pydotEdge.get_destination())
        nodeNames[edge.src] = 1
        nodeNames[edge.dst] = 1
        edges.append(edge)

    result = Graph()
    result.nodes = list(nodeNames.keys())
    result.edges = edges
    return result

main(sys.argv)
